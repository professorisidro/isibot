Projeto: Software para Servir
Resumo: Aqui temos o nosso primeiro estudo de caso completo, com o desafio de fazermos um sistema completo para a Letícia gerenciar e vender seus produtos Natura. Como é o primeiro software e uma versão de 2020/2021 as tecnologias utilizadas estão um tanto quanto "defasadas" em relação ao cenário atual. Entretanto, os conceitos e desafios são perenes e nos ajudam demais a entender desde o requisito, seleção da tecnologia, modificações exigidas pelo cliente (e impacto disso) e entrega.
Complexidade: Média
Indicação: Para quem já fez pelo menos o projeto da Salutar e agora quer entender um sistema maior e com mais requisitos. É um sistema mais longo e portanto isso pode tornar o estudo mais custoso

Projeto: Salutar - A Clínica de Fisioterapia
RESUMO: Aqui vamos criar uma aplicação "simples" para uma clínica de fisioterapia que precisa automatizar suas fichas de pacientes. O modelo de dados é bastante simples e nos ajuda a entender mais o processo de início ao fim de construção de um software. Fizemos uma entrevista com o cliente e propusemos um desafio diferente neste projeto: Usar Docker em uma máquina da Oracle Cloud para conseguirmos deixar disponível o projeto.
COMPLEXIDADE: Baixa
Indicação:Um dos projetos mais simples para executar com uma entrega rápida. Aqui o pré-requisito, além de saber um pouco sobre Java, API, Bancos de Dados e Front End em Angular é entender um pouco sobre contêineres. Criamos uma aplicação usando Docker (tanto que em uma das lives de Deploy não tinhamos nos atentado à quetão da Network)

Projeto: A Newsletter da IsiFLIX
RESUMO: Aqui a idéia é fazermos um modelo simples de envio de emails. Um front extremamente simples para apenas termos um editor WYSIWYG para escrevermos nossa "campanha" de comunicação e enviarmos via serviço de SMTP do Google com JavaMail.
COMPLEXIDADE: Baixa
Indicação: aqui a complexidade é mais por conta da integração do serviço da Google de Email, para que nossa newsletter pudesse enviar as mensagens aos nossos usuários

Projeto: TrueDev - A API de Comércio Eletrônico
RESUMO: Neste projeto não pensamos no sistema como um todo, mas apenas em criar uma API baseada num documento de uma entrevista com um cliente. A necessidade é real, porém focamos apenas no back-end. Também não foi feita a pulicação da API em nenhum serviço de nuvem (tipo Heroku, Netlify, Render, entre outros). O foco foi entender um problema e criar uma API para isso!
COMPLEXIDADE: Baixa
Indicação: se você quer entender um pouco mais sobre a questão de como criar um comércio eletrônico (mas sem integração com meios de pagamentos, esse é um excelente projeto). Tratamos também de questões como uso de DTO e algumas queries customizadas do JPA.

Projeto: The FaceAPP IsiBank Application
RESUMO: Aqui um dos principais desafios até o momento: integrar diferentes tecnologias, metodologias e práticas para criamos uma API de um Internet banking usando os seguintes recursos
Test-Driven Development (vamos explicando o TDD ao longo da execução do projeto)
Visão Computacional
OpenCV/JavaCV e suas bibliotecas
O Resultado foi fantástico, pois conseguimos resolver o login dos usuários por reconhecimento facial e também por métodos "tradicionais"
COMPLEXIDADE: Alta
Indicação - ele é indicado como um projeto inovador que utiliza alem de regras de negócio bem definidas, uma nova forma de 



